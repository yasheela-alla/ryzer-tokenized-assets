# Docker Compose configuration for Ryzer Tokenized Assets
# This sets up the entire stack: frontend, backend, and database
# 
# Usage:
#   docker-compose up        - Start all services
#   docker-compose down      - Stop all services
#   docker-compose logs -f   - View logs

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ryzer-postgres
    environment:
      POSTGRES_DB: ryzer_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      # Mount seed script to initialize database
      - ./backend/seed.sql:/docker-entrypoint-initdb.d/seed.sql
      # Persist database data
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API (Node.js + Express)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ryzer-backend
    environment:
      PORT: 5000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ryzer_db
      DB_USER: postgres
      DB_PASSWORD: postgres
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  # Frontend (Next.js React App)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ryzer-frontend
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:5000
    ports:
      - "3000:3000"
    depends_on:
      - backend
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
